
DA04_T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000854  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f7  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fa  00000000  00000000  000012a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
volatile unsigned int m; // true/false value for motor direction
volatile uint8_t ADCvalue; // Global variable, set to volatile if used with ISR

// this interrupt turns the motor on/off
ISR(INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	EIFR |= (1 <<INTF0); // clear int flag
  9e:	e0 9a       	sbi	0x1c, 0	; 28
	if(n == 0)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a8:	89 2b       	or	r24, r25
  aa:	39 f4       	brne	.+14     	; 0xba <__vector_1+0x2a>
		n = 1; // turn on motor
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__vector_1+0x32>
	else
		n = 0; // turn off motor
  ba:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_2>:

// this interrupt changes motor's direction
ISR(INT1_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	EIFR |= (1 <<INTF1); // clear int flag
  de:	e1 9a       	sbi	0x1c, 1	; 28
	if(m == 0)
  e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <m>
  e4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <m+0x1>
  e8:	89 2b       	or	r24, r25
  ea:	39 f4       	brne	.+14     	; 0xfa <__vector_2+0x2a>
		m = 1; // change to counter-clockwise
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <m+0x1>
  f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <m>
  f8:	04 c0       	rjmp	.+8      	; 0x102 <__vector_2+0x32>
	else
		m = 0; // change to clockwise
  fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <m+0x1>
  fe:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <m>
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <delaytime>:
	}
}

void delaytime()
{
	TCNT1 = 0; // initialize counter	
 110:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 114:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	OCR1A = ADCvalue * 100; // initialize top
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADCvalue>
 11c:	24 e6       	ldi	r18, 0x64	; 100
 11e:	82 9f       	mul	r24, r18
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	while(!(TIFR1 & (1 << OCF1A))); // waits for overflow
 12c:	b1 9b       	sbis	0x16, 1	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <delaytime+0x1c>
	TIFR1 |= (1 << OCF1A); // clears overflow flag
 130:	b1 9a       	sbi	0x16, 1	; 22
 132:	08 95       	ret

00000134 <Clockwise>:
}

void Clockwise()
{
	PORTB = 0x06;
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	85 b9       	out	0x05, r24	; 5
	delaytime();
 138:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
	PORTB = 0x0C;
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	85 b9       	out	0x05, r24	; 5
	delaytime();
 140:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
	PORTB = 0x09;
 144:	89 e0       	ldi	r24, 0x09	; 9
 146:	85 b9       	out	0x05, r24	; 5
	delaytime();
 148:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
	PORTB = 0x03;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	85 b9       	out	0x05, r24	; 5
	delaytime();
 150:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
 154:	08 95       	ret

00000156 <CClockwise>:
}

void CClockwise()
{
	PORTB = 0x06;
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	85 b9       	out	0x05, r24	; 5
	delaytime();
 15a:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
	PORTB = 0x03;
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	85 b9       	out	0x05, r24	; 5
	delaytime();
 162:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
	PORTB = 0x09;
 166:	89 e0       	ldi	r24, 0x09	; 9
 168:	85 b9       	out	0x05, r24	; 5
	delaytime();
 16a:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
	PORTB = 0x0C;
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	85 b9       	out	0x05, r24	; 5
	delaytime();
 172:	0e 94 88 00 	call	0x110	; 0x110 <delaytime>
 176:	08 95       	ret

00000178 <main>:
}

int main(void)
{
	// set ports
	DDRB = 0x0F;
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	84 b9       	out	0x04, r24	; 4
	BUTTONPORT = (1 << BUTTON_PIN) | (1 << BUTTON_PIN_B);	// pull-up
 17c:	8c e0       	ldi	r24, 0x0C	; 12
 17e:	8b b9       	out	0x0b, r24	; 11
	// set PD2 and PD3 as input (INT0 and INT1 interrupt)
	BUTTONDDR = (1 << BUTTON_PIN) | (1 << BUTTON_PIN_B);
 180:	8a b9       	out	0x0a, r24	; 10
	
	// ADMUX and ADC config
	ADMUX = 0; // use ADC0
 182:	ec e7       	ldi	r30, 0x7C	; 124
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference
 188:	90 81       	ld	r25, Z
 18a:	90 64       	ori	r25, 0x40	; 64
 18c:	90 83       	st	Z, r25
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
 18e:	90 81       	ld	r25, Z
 190:	90 62       	ori	r25, 0x20	; 32
 192:	90 83       	st	Z, r25
	ADCSRA = 0x87; // enables ADC, sets prescaler for ADC conversion
 194:	97 e8       	ldi	r25, 0x87	; 135
 196:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0x00; // free running mode
 19a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

	// set timer
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10); // CTC mode, prescaler 64
 19e:	e1 e8       	ldi	r30, 0x81	; 129
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	90 81       	ld	r25, Z
 1a4:	9b 60       	ori	r25, 0x0B	; 11
 1a6:	90 83       	st	Z, r25

	// INT0 and INT1 interrupt settings
	EIMSK = (1 << INT0) | (1 << INT1);		// enables INT0 and INT1 interrupts
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	9d bb       	out	0x1d, r25	; 29
	EICRA = (1 << ISC01) | (1 << ISC00);	// triggers INT0 on rising edge
 1ac:	e9 e6       	ldi	r30, 0x69	; 105
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	90 83       	st	Z, r25
	EICRA = (1 << ISC11) | (1 << ISC10);	// triggers INT1 on rising edge
 1b2:	80 83       	st	Z, r24
	n = 0; //initialize motor as turned off
 1b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	sei(); // enable interrupts
 1bc:	78 94       	sei

	while (1)
	{
		ADCSRA |= (1 << ADSC); // start ADC conversion
 1be:	ca e7       	ldi	r28, 0x7A	; 122
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
		while ( (ADCSRA&(1<<ADIF)) == 0 ); // wait for conversion to finish
		ADCvalue = ADCH; // classify ADCvalue has high 8 bits
 1c2:	09 e7       	ldi	r16, 0x79	; 121
 1c4:	10 e0       	ldi	r17, 0x00	; 0
	
	sei(); // enable interrupts

	while (1)
	{
		ADCSRA |= (1 << ADSC); // start ADC conversion
 1c6:	88 81       	ld	r24, Y
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	88 83       	st	Y, r24
		while ( (ADCSRA&(1<<ADIF)) == 0 ); // wait for conversion to finish
 1cc:	88 81       	ld	r24, Y
 1ce:	84 ff       	sbrs	r24, 4
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <main+0x54>
		ADCvalue = ADCH; // classify ADCvalue has high 8 bits
 1d2:	f8 01       	movw	r30, r16
 1d4:	80 81       	ld	r24, Z
 1d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCvalue>
		if(n != 0 && m == 0) // if turned on and m = 0,
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e2:	89 2b       	or	r24, r25
 1e4:	71 f0       	breq	.+28     	; 0x202 <main+0x8a>
 1e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <m>
 1ea:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <m+0x1>
 1ee:	89 2b       	or	r24, r25
 1f0:	41 f4       	brne	.+16     	; 0x202 <main+0x8a>
		{
			Clockwise(); // call to move motor clockwise.
 1f2:	0e 94 9a 00 	call	0x134	; 0x134 <Clockwise>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f ec       	ldi	r24, 0xCF	; 207
 1f8:	97 e0       	ldi	r25, 0x07	; 7
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x82>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x88>
 200:	00 00       	nop
			_delay_ms(1);
		}
		if(n != 0 && m != 0) // Otherwise,
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 20a:	89 2b       	or	r24, r25
 20c:	e1 f2       	breq	.-72     	; 0x1c6 <main+0x4e>
 20e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <m>
 212:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <m+0x1>
 216:	89 2b       	or	r24, r25
 218:	b1 f2       	breq	.-84     	; 0x1c6 <main+0x4e>
		{
			CClockwise();// call to move motor counter-clockwise
 21a:	0e 94 ab 00 	call	0x156	; 0x156 <CClockwise>
 21e:	ef ec       	ldi	r30, 0xCF	; 207
 220:	f7 e0       	ldi	r31, 0x07	; 7
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0xaa>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0xb0>
 228:	00 00       	nop
 22a:	cd cf       	rjmp	.-102    	; 0x1c6 <main+0x4e>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
