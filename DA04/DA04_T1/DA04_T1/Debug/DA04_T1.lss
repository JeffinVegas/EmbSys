
DA04_T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a7  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000284  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034c  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:

volatile unsigned int n; // true/false value to determine if motor is on/off

// this interrupt turns the motor on/off
ISR(INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	EIFR |= (1 <<INTF0); // clear int flag
  9e:	e0 9a       	sbi	0x1c, 0	; 28
	PORTB ^= (1 << PORTB0);
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	85 b9       	out	0x05, r24	; 5
}
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <main>:

int main(void)
{	 
	DDRB = 0xFF; // make Port B an output
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
	BUTTONPORT = (1 << BUTTON_PIN);	// pull-up
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	8b b9       	out	0x0b, r24	; 11
	BUTTONDDR = (1 << BUTTON_PIN); // set PD2 as input (INT0 interrupt)
  be:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << PORTD6);	// PD.6 (OC0A) is an output
  c0:	56 9a       	sbi	0x0a, 6	; 10

	// ADMUX and ADC config
	ADMUX = 0; // use ADC0
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
  ce:	80 81       	ld	r24, Z
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	80 83       	st	Z, r24
	ADCSRA = 0x87; // enables ADC, sets prescaler for ADC conversion
  d4:	87 e8       	ldi	r24, 0x87	; 135
  d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0x00; // free running mode
  da:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

	OCR0A = 0;	 // PWM with 50% duty cycle
  de:	17 bc       	out	0x27, r1	; 39
	TCCR0A |= (1 << COM0A1); // non-inverting mode
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 <<WGM00);	// fast PWM mode
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01); // prescaler 8
  ec:	85 b5       	in	r24, 0x25	; 37
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	85 bd       	out	0x25, r24	; 37
	
	// INT0 interrupt settings
	EIMSK = (1 << INT0);					// enables INT0 interrupt
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1 << ISC01) | (1 << ISC00);	// triggers INT0 on rising edge	
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	
	n = 0; //initialize motor as turned off
  fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PORTB = 0x01;	//hbridge.forward
 104:	85 b9       	out	0x05, r24	; 5
	
	sei(); // enable interrupts
 106:	78 94       	sei
		
	while (1)
	{
		ADCSRA |= (1 << ADSC); // start conversion
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
		while ( (ADCSRA&(1<<ADIF)) == 0 ) ; // wait for conversion to finish
		OCR0A = ADCH;
 10c:	a9 e7       	ldi	r26, 0x79	; 121
 10e:	b0 e0       	ldi	r27, 0x00	; 0
	
	sei(); // enable interrupts
		
	while (1)
	{
		ADCSRA |= (1 << ADSC); // start conversion
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
		while ( (ADCSRA&(1<<ADIF)) == 0 ) ; // wait for conversion to finish
 116:	80 81       	ld	r24, Z
 118:	84 ff       	sbrs	r24, 4
 11a:	fd cf       	rjmp	.-6      	; 0x116 <main+0x60>
		OCR0A = ADCH;
 11c:	8c 91       	ld	r24, X
 11e:	87 bd       	out	0x27, r24	; 39
	}
 120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x5a>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
