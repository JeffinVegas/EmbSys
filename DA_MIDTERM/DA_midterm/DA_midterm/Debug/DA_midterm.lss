
DA_midterm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00000364  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001c0  008001c0  000004b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c95  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ca  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000417  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000425  00000000  00000000  000022cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3c       	cpi	r26, 0xC0	; 192
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ec       	ldi	r26, 0xC0	; 192
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3c       	cpi	r26, 0xC6	; 198
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUart>:
	return 0;
}

void initUart() {
	/*Set baud rate */
	UBRR0H = ((MYUBRR) >> 8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR;
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0A |= (1<< U2X0);
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0); // Enable transmitter
  ba:	e1 ec       	ldi	r30, 0xC1	; 193
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stp
  c4:	e2 ec       	ldi	r30, 0xC2	; 194
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <__vector_21>:
}

// Interrupt subroutine for ADC value
ISR(ADC_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	25 97       	sbiw	r28, 0x05	; 5
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61
	unsigned char i = 0x00;
	char tmptemp[5];
	
	ADCvalue = (ADCH << 1);	
 100:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 104:	88 0f       	add	r24, r24
 106:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <ADCvalue>
	itoa(ADCvalue, tmptemp, 10); //convert char to ascii
 10a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <ADCvalue>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 10e:	4a e0       	ldi	r20, 0x0A	; 10
 110:	be 01       	movw	r22, r28
 112:	6f 5f       	subi	r22, 0xFF	; 255
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__itoa_ncheck>
 11c:	fe 01       	movw	r30, r28
 11e:	31 96       	adiw	r30, 0x01	; 1
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0x00 ; i < 5 ; i++)
		temp[i] = tmptemp[i]; //move converted ascii
 124:	21 91       	ld	r18, Z+
 126:	dc 01       	movw	r26, r24
 128:	a0 54       	subi	r26, 0x40	; 64
 12a:	be 4f       	sbci	r27, 0xFE	; 254
 12c:	2c 93       	st	X, r18
 12e:	01 96       	adiw	r24, 0x01	; 1
	unsigned char i = 0x00;
	char tmptemp[5];
	
	ADCvalue = (ADCH << 1);	
	itoa(ADCvalue, tmptemp, 10); //convert char to ascii
	for(i = 0x00 ; i < 5 ; i++)
 130:	85 30       	cpi	r24, 0x05	; 5
 132:	91 05       	cpc	r25, r1
 134:	b9 f7       	brne	.-18     	; 0x124 <__vector_21+0x54>
		temp[i] = tmptemp[i]; //move converted ascii
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <send_AT>:

void send_AT(volatile unsigned char AT[]) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <send_AT+0x6>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	9c 01       	movw	r18, r24
	volatile unsigned char a;
	volatile unsigned char ATlength = 0;
 172:	1a 82       	std	Y+2, r1	; 0x02
	
	while(AT[ATlength] != 0)
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	f9 01       	movw	r30, r18
 178:	e8 0f       	add	r30, r24
 17a:	f1 1d       	adc	r31, r1
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	51 f0       	breq	.+20     	; 0x196 <send_AT+0x30>
		ATlength++; // find length
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	9f 5f       	subi	r25, 0xFF	; 255
 186:	9a 83       	std	Y+2, r25	; 0x02

void send_AT(volatile unsigned char AT[]) {
	volatile unsigned char a;
	volatile unsigned char ATlength = 0;
	
	while(AT[ATlength] != 0)
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	f9 01       	movw	r30, r18
 18c:	e8 0f       	add	r30, r24
 18e:	f1 1d       	adc	r31, r1
 190:	80 81       	ld	r24, Z
 192:	81 11       	cpse	r24, r1
 194:	f6 cf       	rjmp	.-20     	; 0x182 <send_AT+0x1c>
		ATlength++; // find length
		
	for(a = 0x00; a < ATlength; a++)
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	99 81       	ldd	r25, Y+1	; 0x01
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	98 17       	cp	r25, r24
 19e:	a8 f4       	brcc	.+42     	; 0x1ca <send_AT+0x64>
	{
		while(!(UCSR0A & (1<<UDRE0)));	// wait for UART
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = AT[a];					// transmit char array
 1a4:	46 ec       	ldi	r20, 0xC6	; 198
 1a6:	50 e0       	ldi	r21, 0x00	; 0
	while(AT[ATlength] != 0)
		ATlength++; // find length
		
	for(a = 0x00; a < ATlength; a++)
	{
		while(!(UCSR0A & (1<<UDRE0)));	// wait for UART
 1a8:	90 81       	ld	r25, Z
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <send_AT+0x42>
		UDR0 = AT[a];					// transmit char array
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	d9 01       	movw	r26, r18
 1b2:	a8 0f       	add	r26, r24
 1b4:	b1 1d       	adc	r27, r1
 1b6:	8c 91       	ld	r24, X
 1b8:	da 01       	movw	r26, r20
 1ba:	8c 93       	st	X, r24
	volatile unsigned char ATlength = 0;
	
	while(AT[ATlength] != 0)
		ATlength++; // find length
		
	for(a = 0x00; a < ATlength; a++)
 1bc:	99 81       	ldd	r25, Y+1	; 0x01
 1be:	9f 5f       	subi	r25, 0xFF	; 255
 1c0:	99 83       	std	Y+1, r25	; 0x01
 1c2:	99 81       	ldd	r25, Y+1	; 0x01
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	98 17       	cp	r25, r24
 1c8:	78 f3       	brcs	.-34     	; 0x1a8 <send_AT+0x42>
	{
		while(!(UCSR0A & (1<<UDRE0)));	// wait for UART
		UDR0 = AT[a];					// transmit char array
	}
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
void send_AT(volatile unsigned char AT[]);

int main(void)
{
	
	ADMUX = 0; // use ADC0
 1d4:	ec e7       	ldi	r30, 0x7C	; 124
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference
 1da:	80 81       	ld	r24, Z
 1dc:	80 64       	ori	r24, 0x40	; 64
 1de:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
 1e0:	80 81       	ld	r24, Z
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
 1e6:	ea e7       	ldi	r30, 0x7A	; 122
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	87 60       	ori	r24, 0x07	; 7
 1ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
 1f0:	80 81       	ld	r24, Z
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	80 83       	st	Z, r24
	ADCSRB = 0; // 0 for free running mode
 1f6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA |= (1 << ADEN); // Enable the ADC
 1fa:	80 81       	ld	r24, Z
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable Interrupts
 200:	80 81       	ld	r24, Z
 202:	88 60       	ori	r24, 0x08	; 8
 204:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start the ADC conversion	
 206:	80 81       	ld	r24, Z
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	80 83       	st	Z, r24
	
	initUart();
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <initUart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	3d e3       	ldi	r19, 0x3D	; 61
 214:	89 e4       	ldi	r24, 0x49	; 73
 216:	21 50       	subi	r18, 0x01	; 1
 218:	30 40       	sbci	r19, 0x00	; 0
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x42>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x4c>
 220:	00 00       	nop
	
	_delay_ms(1500);
	send_AT(AT); //at
 222:	8a eb       	ldi	r24, 0xBA	; 186
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	2d e3       	ldi	r18, 0x3D	; 61
 22e:	39 e4       	ldi	r19, 0x49	; 73
 230:	91 50       	subi	r25, 0x01	; 1
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	30 40       	sbci	r19, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x5c>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x66>
 23a:	00 00       	nop
	_delay_ms(1500);
	send_AT(FIRMWARE); //firmware
 23c:	85 e0       	ldi	r24, 0x05	; 5
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	9d e3       	ldi	r25, 0x3D	; 61
 248:	29 e4       	ldi	r18, 0x49	; 73
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	20 40       	sbci	r18, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x76>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x80>
 254:	00 00       	nop
	_delay_ms(1500);
	send_AT(CWMODE); //wifi mode
 256:	8c e3       	ldi	r24, 0x3C	; 60
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 25e:	3f ef       	ldi	r19, 0xFF	; 255
 260:	8d e3       	ldi	r24, 0x3D	; 61
 262:	99 e4       	ldi	r25, 0x49	; 73
 264:	31 50       	subi	r19, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x90>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x9a>
 26e:	00 00       	nop
	_delay_ms(1500);
	send_AT(CONNECTWIFI); //connect with WiFi
 270:	8e e0       	ldi	r24, 0x0E	; 14
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 278:	2a ea       	ldi	r18, 0xAA	; 170
 27a:	36 ee       	ldi	r19, 0xE6	; 230
 27c:	86 e9       	ldi	r24, 0x96	; 150
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	21 50       	subi	r18, 0x01	; 1
 282:	30 40       	sbci	r19, 0x00	; 0
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	d9 f7       	brne	.-10     	; 0x280 <main+0xac>
 28a:	00 00       	nop
	_delay_ms(10000);
	send_AT(CIPMUX); //enable
 28c:	8c ea       	ldi	r24, 0xAC	; 172
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
	
	sei();
 294:	78 94       	sei
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	39 e6       	ldi	r19, 0x69	; 105
 29a:	88 e1       	ldi	r24, 0x18	; 24
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	30 40       	sbci	r19, 0x00	; 0
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0xc8>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xd2>
 2a6:	00 00       	nop
	while (1)
	{
		_delay_ms(500);					
		send_AT(CIPSTART);	// start connection
 2a8:	83 e8       	ldi	r24, 0x83	; 131
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 2b0:	9f ef       	ldi	r25, 0xFF	; 255
 2b2:	29 e6       	ldi	r18, 0x69	; 105
 2b4:	38 e1       	ldi	r19, 0x18	; 24
 2b6:	91 50       	subi	r25, 0x01	; 1
 2b8:	20 40       	sbci	r18, 0x00	; 0
 2ba:	30 40       	sbci	r19, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0xe2>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0xec>
 2c0:	00 00       	nop
		_delay_ms(500);	
		send_AT(CIPSIZE);	// size
 2c2:	8a e4       	ldi	r24, 0x4A	; 74
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	99 e6       	ldi	r25, 0x69	; 105
 2ce:	28 e1       	ldi	r18, 0x18	; 24
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0xfc>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x106>
 2da:	00 00       	nop
		_delay_ms(500);	
		send_AT(SEND_DATA);
 2dc:	8a e5       	ldi	r24, 0x5A	; 90
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
		send_AT(temp); //temperature
 2e4:	80 ec       	ldi	r24, 0xC0	; 192
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
		send_AT(BREAK);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 2f4:	d0 cf       	rjmp	.-96     	; 0x296 <main+0xc2>

000002f6 <__itoa_ncheck>:
 2f6:	bb 27       	eor	r27, r27
 2f8:	4a 30       	cpi	r20, 0x0A	; 10
 2fa:	31 f4       	brne	.+12     	; 0x308 <__itoa_ncheck+0x12>
 2fc:	99 23       	and	r25, r25
 2fe:	22 f4       	brpl	.+8      	; 0x308 <__itoa_ncheck+0x12>
 300:	bd e2       	ldi	r27, 0x2D	; 45
 302:	90 95       	com	r25
 304:	81 95       	neg	r24
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	0c 94 87 01 	jmp	0x30e	; 0x30e <__utoa_common>

0000030c <__utoa_ncheck>:
 30c:	bb 27       	eor	r27, r27

0000030e <__utoa_common>:
 30e:	fb 01       	movw	r30, r22
 310:	55 27       	eor	r21, r21
 312:	aa 27       	eor	r26, r26
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	aa 1f       	adc	r26, r26
 31a:	a4 17       	cp	r26, r20
 31c:	10 f0       	brcs	.+4      	; 0x322 <__utoa_common+0x14>
 31e:	a4 1b       	sub	r26, r20
 320:	83 95       	inc	r24
 322:	50 51       	subi	r21, 0x10	; 16
 324:	b9 f7       	brne	.-18     	; 0x314 <__utoa_common+0x6>
 326:	a0 5d       	subi	r26, 0xD0	; 208
 328:	aa 33       	cpi	r26, 0x3A	; 58
 32a:	08 f0       	brcs	.+2      	; 0x32e <__utoa_common+0x20>
 32c:	a9 5d       	subi	r26, 0xD9	; 217
 32e:	a1 93       	st	Z+, r26
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	79 f7       	brne	.-34     	; 0x312 <__utoa_common+0x4>
 334:	b1 11       	cpse	r27, r1
 336:	b1 93       	st	Z+, r27
 338:	11 92       	st	Z+, r1
 33a:	cb 01       	movw	r24, r22
 33c:	0c 94 a0 01 	jmp	0x340	; 0x340 <strrev>

00000340 <strrev>:
 340:	dc 01       	movw	r26, r24
 342:	fc 01       	movw	r30, r24
 344:	67 2f       	mov	r22, r23
 346:	71 91       	ld	r23, Z+
 348:	77 23       	and	r23, r23
 34a:	e1 f7       	brne	.-8      	; 0x344 <strrev+0x4>
 34c:	32 97       	sbiw	r30, 0x02	; 2
 34e:	04 c0       	rjmp	.+8      	; 0x358 <strrev+0x18>
 350:	7c 91       	ld	r23, X
 352:	6d 93       	st	X+, r22
 354:	70 83       	st	Z, r23
 356:	62 91       	ld	r22, -Z
 358:	ae 17       	cp	r26, r30
 35a:	bf 07       	cpc	r27, r31
 35c:	c8 f3       	brcs	.-14     	; 0x350 <strrev+0x10>
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
