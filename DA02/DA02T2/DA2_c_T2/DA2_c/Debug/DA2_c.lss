
DA2_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006be  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003af  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007a  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <checkButton>:
		}
	}
}

short checkButton()
{
  80:	84 e1       	ldi	r24, 0x14	; 20
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	ef e0       	ldi	r30, 0x0F	; 15
  86:	f7 e2       	ldi	r31, 0x27	; 39
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <checkButton+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <checkButton+0xe>
  8e:	00 00       	nop
  90:	01 97       	sbiw	r24, 0x01	; 1
	short count = 0; // counter
	
	while(//!(BUTTONPIN & (1 << BUTTON_PIN)) && // check if button is stayed 
  92:	c1 f7       	brne	.-16     	; 0x84 <checkButton+0x4>
		_delay_ms(5);
	}
	
	return (count == 20);
	// return true if button has been held for 0.1 sec
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	08 95       	ret

0000009a <main>:

short checkButton(); // prototype

int main(void)
{
	LED_DDR |= (1 << LED_PIN);	// Set LED to output
  9a:	22 9a       	sbi	0x04, 2	; 4
	LEDPORT &= ~(1 << LED_PIN);	// Initial state of OFF
  9c:	2a 98       	cbi	0x05, 2	; 5
	
	BUTTONPORT |= (1 << BUTTON_PIN);	// pull-up
  9e:	5a 9a       	sbi	0x0b, 2	; 11
		short pressed = checkButton(); // branch to
		if(1 == 1) // if button is pressed,
		{
			_delay_ms(900); // 0.9 sec delay
			// (0.9 sec + 0.1 sec makes 1 sec delay)
			LEDPORT ^= (1 << LED_PIN);	// turn LED on
  a0:	c4 e0       	ldi	r28, 0x04	; 4
	
	while (1)	// Loops forever
	{
		// modified code to make sure there
		// was a 1 sec delay
		short pressed = checkButton(); // branch to
  a2:	0e 94 40 00 	call	0x80	; 0x80 <checkButton>
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	88 ef       	ldi	r24, 0xF8	; 248
  aa:	95 e1       	ldi	r25, 0x15	; 21
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x12>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x1c>
  b6:	00 00       	nop
		if(1 == 1) // if button is pressed,
		{
			_delay_ms(900); // 0.9 sec delay
			// (0.9 sec + 0.1 sec makes 1 sec delay)
			LEDPORT ^= (1 << LED_PIN);	// turn LED on
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8c 27       	eor	r24, r28
  bc:	85 b9       	out	0x05, r24	; 5
  be:	f1 cf       	rjmp	.-30     	; 0xa2 <main+0x8>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
