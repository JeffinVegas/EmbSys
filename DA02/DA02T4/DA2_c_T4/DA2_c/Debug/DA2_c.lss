
DA2_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f2  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000653  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000248  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c4  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define LED_DDR DDRB

volatile int count;

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	volatile int count = 0;
  9a:	1a 82       	std	Y+2, r1	; 0x02
  9c:	19 82       	std	Y+1, r1	; 0x01
	LED_DDR |= (1 << LED_PIN);	// Set LED to output
  9e:	22 9a       	sbi	0x04, 2	; 4

	TCCR0A = 0;
  a0:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);	// clock divided by 1024
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	85 60       	ori	r24, 0x05	; 5
  a6:	85 bd       	out	0x25, r24	; 37

	TCNT0 = 0;
  a8:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);	// enable interrupt on overflow
  aa:	ee e6       	ldi	r30, 0x6E	; 110
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	80 83       	st	Z, r24

	sei(); // turn on interrupts
  b4:	78 94       	sei
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x26>

000000b8 <__vector_16>:
}

// called after overflow of timer.
// toggle LED on/off
ISR(TIMER0_OVF_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <__vector_16+0x14>
  cc:	00 d0       	rcall	.+0      	; 0xce <__vector_16+0x16>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	if(count == 6){
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  da:	06 97       	sbiw	r24, 0x06	; 6
  dc:	49 f5       	brne	.+82     	; 0x130 <__vector_16+0x78>
		for(volatile unsigned int i=0; i<36; i++)
  de:	1c 82       	std	Y+4, r1	; 0x04
  e0:	1b 82       	std	Y+3, r1	; 0x03
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	84 97       	sbiw	r24, 0x24	; 36
  e8:	d0 f4       	brcc	.+52     	; 0x11e <__vector_16+0x66>
			for(volatile unsigned int j=0; j<255; j++);
  ea:	1a 82       	std	Y+2, r1	; 0x02
  ec:	19 82       	std	Y+1, r1	; 0x01
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	91 05       	cpc	r25, r1
  f6:	50 f4       	brcc	.+20     	; 0x10c <__vector_16+0x54>
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	91 05       	cpc	r25, r1
 10a:	b0 f3       	brcs	.-20     	; 0xf8 <__vector_16+0x40>
// called after overflow of timer.
// toggle LED on/off
ISR(TIMER0_OVF_vect)
{
	if(count == 6){
		for(volatile unsigned int i=0; i<36; i++)
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	9c 81       	ldd	r25, Y+4	; 0x04
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	9c 83       	std	Y+4, r25	; 0x04
 114:	8b 83       	std	Y+3, r24	; 0x03
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	9c 81       	ldd	r25, Y+4	; 0x04
 11a:	84 97       	sbiw	r24, 0x24	; 36
 11c:	30 f3       	brcs	.-52     	; 0xea <__vector_16+0x32>
			for(volatile unsigned int j=0; j<255; j++);
				LEDPORT ^= (1 << LED_PIN);	//turn LED on
 11e:	95 b1       	in	r25, 0x05	; 5
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	89 27       	eor	r24, r25
 124:	85 b9       	out	0x05, r24	; 5
	count = 0;
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 12e:	09 c0       	rjmp	.+18     	; 0x142 <__vector_16+0x8a>
	}
	else
		count++;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
