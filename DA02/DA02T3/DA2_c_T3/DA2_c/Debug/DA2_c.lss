
DA2_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000628  00000000  00000000  000008b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000238  00000000  00000000  00000edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001492  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LEDPORT PORTB
#define LED_PIN PORTB2
#define LED_DDR DDRB

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0xa>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	volatile int count = 0; // initialize overflow count
  8e:	1a 82       	std	Y+2, r1	; 0x02
  90:	19 82       	std	Y+1, r1	; 0x01
	LED_DDR |= (1 << LED_PIN);	// Set LED to output
  92:	22 9a       	sbi	0x04, 2	; 4
	LEDPORT &= ~(1 << LED_PIN);	// Initial state of OFF
  94:	2a 98       	cbi	0x05, 2	; 5
	
	TCCR0A = 0; // normal mode
  96:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);	// Clock divided by 1024
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	85 bd       	out	0x25, r24	; 37
			//with cause the LED to toggle for 0.25 sec
			if(count == 6) 
			{
				for(volatile unsigned int i=0; i<38; i++)
				for(volatile unsigned int j=0; j<255; j++);
				LEDPORT ^= (1 << LED_PIN); //toggle LED light
  9c:	24 e0       	ldi	r18, 0x04	; 4
	TCCR0A = 0; // normal mode
	TCCR0B = (1 << CS02) | (1 << CS00);	// Clock divided by 1024
	
	while (1)	// Loops forever
	{
		if(TCNT0 >= 255)
  9e:	86 b5       	in	r24, 0x26	; 38
  a0:	8f 3f       	cpi	r24, 0xFF	; 255
  a2:	e9 f7       	brne	.-6      	; 0x9e <main+0x1e>
		{	
			// using this check and the two for loops inside
			//with cause the LED to toggle for 0.25 sec
			if(count == 6) 
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	06 97       	sbiw	r24, 0x06	; 6
  aa:	31 f5       	brne	.+76     	; 0xf8 <main+0x78>
			{
				for(volatile unsigned int i=0; i<38; i++)
  ac:	1e 82       	std	Y+6, r1	; 0x06
  ae:	1d 82       	std	Y+5, r1	; 0x05
  b0:	8d 81       	ldd	r24, Y+5	; 0x05
  b2:	9e 81       	ldd	r25, Y+6	; 0x06
  b4:	86 97       	sbiw	r24, 0x26	; 38
  b6:	d0 f4       	brcc	.+52     	; 0xec <main+0x6c>
				for(volatile unsigned int j=0; j<255; j++);
  b8:	1c 82       	std	Y+4, r1	; 0x04
  ba:	1b 82       	std	Y+3, r1	; 0x03
  bc:	8b 81       	ldd	r24, Y+3	; 0x03
  be:	9c 81       	ldd	r25, Y+4	; 0x04
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	91 05       	cpc	r25, r1
  c4:	50 f4       	brcc	.+20     	; 0xda <main+0x5a>
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	9c 81       	ldd	r25, Y+4	; 0x04
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	9c 83       	std	Y+4, r25	; 0x04
  ce:	8b 83       	std	Y+3, r24	; 0x03
  d0:	8b 81       	ldd	r24, Y+3	; 0x03
  d2:	9c 81       	ldd	r25, Y+4	; 0x04
  d4:	8f 3f       	cpi	r24, 0xFF	; 255
  d6:	91 05       	cpc	r25, r1
  d8:	b0 f3       	brcs	.-20     	; 0xc6 <main+0x46>
		{	
			// using this check and the two for loops inside
			//with cause the LED to toggle for 0.25 sec
			if(count == 6) 
			{
				for(volatile unsigned int i=0; i<38; i++)
  da:	8d 81       	ldd	r24, Y+5	; 0x05
  dc:	9e 81       	ldd	r25, Y+6	; 0x06
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	9e 83       	std	Y+6, r25	; 0x06
  e2:	8d 83       	std	Y+5, r24	; 0x05
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	9e 81       	ldd	r25, Y+6	; 0x06
  e8:	86 97       	sbiw	r24, 0x26	; 38
  ea:	30 f3       	brcs	.-52     	; 0xb8 <main+0x38>
				for(volatile unsigned int j=0; j<255; j++);
				LEDPORT ^= (1 << LED_PIN); //toggle LED light
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	82 27       	eor	r24, r18
  f0:	85 b9       	out	0x05, r24	; 5
				count = 0; //reset count to continuously toggle LED
  f2:	1a 82       	std	Y+2, r1	; 0x02
  f4:	19 82       	std	Y+1, r1	; 0x01
  f6:	05 c0       	rjmp	.+10     	; 0x102 <main+0x82>
			}
			else
				count++; // overflow occurred
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
		TCNT0 = 0; // reset timer
 102:	16 bc       	out	0x26, r1	; 38
 104:	cc cf       	rjmp	.-104    	; 0x9e <main+0x1e>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
