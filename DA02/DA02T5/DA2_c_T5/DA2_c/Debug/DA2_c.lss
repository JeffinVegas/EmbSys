
DA2_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000797  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  00000987  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  000016f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#define BUTTONDDR DDRD
#define BUTTON_PIN PORTD2
#define BUTTONPIN PD2

ISR(INT0_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
	unsigned char temp; // Saves current state of LED light
	EIFR |= (1 <<INTF0); // clear flag
  92:	e0 9a       	sbi	0x1c, 0	; 28
	temp = LEDPORT;	// Save the LED light state
  94:	85 b1       	in	r24, 0x05	; 5
	LEDPORT |= (1 << LED_PIN);	// Turn LED on
  96:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	39 e6       	ldi	r19, 0x69	; 105
  9c:	98 e1       	ldi	r25, 0x18	; 24
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <__vector_1+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <__vector_1+0x28>
  a8:	00 00       	nop
	_delay_ms(1000);	// Keep LED on for 1 sec
	LEDPORT = temp;	// Restore state
  aa:	85 b9       	out	0x05, r24	; 5
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	3f 91       	pop	r19
  b2:	2f 91       	pop	r18
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:

int main(void)
{
	LED_DDR |= (1 << LED_PIN);	// Set LED to output
  be:	22 9a       	sbi	0x04, 2	; 4
	LEDPORT &= ~(1 << LED_PIN);	// Initial state of OFF
  c0:	2a 98       	cbi	0x05, 2	; 5
	
	BUTTONPORT = (1 << BUTTONPIN);	// pull-up
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	8b b9       	out	0x0b, r24	; 11
	BUTTONDDR = (1 << BUTTONPIN);	// set PD2 as input (using for interrupt INT0)
  c6:	8a b9       	out	0x0a, r24	; 10
	
	EIMSK = (1 << INT0);					// Enable INT0
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1 << ISC01) | (1 << ISC00);	// Trigger INT0 on rising edge
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	
	sei(); // enables interrupt
  d2:	78 94       	sei
	
	while (1)	// Loops forever
	{
		LEDPORT |= (1 << LED_PIN);	// turn LED on
  d4:	2a 9a       	sbi	0x05, 2	; 5
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	8a e1       	ldi	r24, 0x1A	; 26
  da:	96 e0       	ldi	r25, 0x06	; 6
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x1e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x28>
  e6:	00 00       	nop
		_delay_ms(250);	// 0.25 sec delay
		LEDPORT &= ~(1 << LED_PIN);	// turn LED off
  e8:	2a 98       	cbi	0x05, 2	; 5
  ea:	2f e7       	ldi	r18, 0x7F	; 127
  ec:	8a e1       	ldi	r24, 0x1A	; 26
  ee:	96 e0       	ldi	r25, 0x06	; 6
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x32>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x3c>
  fa:	00 00       	nop
  fc:	eb cf       	rjmp	.-42     	; 0xd4 <main+0x16>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
