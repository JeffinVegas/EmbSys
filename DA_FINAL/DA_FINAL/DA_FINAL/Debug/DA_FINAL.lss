
DA_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000003f2  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001a0  008001a0  00000526  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089b  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000548  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d3  00000000  00000000  00001fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3a       	cpi	r26, 0xA6	; 166
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
void LeftSignal(); // TOGGLE LEFT TURN SIGNAL
void RightSignal(); // TOGGLE RIGHT TURN SIGNAL

int main(void)
{
	n = 0; // INITIALIZE LEFT TURN SIGNAL AS OFF
  a6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
  aa:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
	m = 0; // INITIALIZE RIGHT TURN SIGNAL AS OFF
  ae:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <m+0x1>
  b2:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <m>
	DDRB = 0xFF; // FIRST MOTOR
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF; // SECOND MOTOR
  ba:	8a b9       	out	0x0a, r24	; 10
	LED_DDR |= (1 << LED_PIN_LEFT) | (1 <<LED_PIN_RIGHT);	// Set LED to output
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	80 63       	ori	r24, 0x30	; 48
  c0:	87 b9       	out	0x07, r24	; 7
	LEDPORT &= ~(1 << LED_PIN_LEFT);	// Initial state of OFF
  c2:	44 98       	cbi	0x08, 4	; 8
	LEDPORT &= ~(1 << LED_PIN_RIGHT);	// Initial state of OFF
  c4:	45 98       	cbi	0x08, 5	; 8
	ICR1 = 2000; // TOP, PWM MODE
  c6:	80 ed       	ldi	r24, 0xD0	; 208
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  ce:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 2000; // 100% duty cycle for left motor, MAX SPEED
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 2000; // 100% duty cycle for right motor, MAX SPEED
  da:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1); // None-inverted mode.
  e2:	e0 e8       	ldi	r30, 0x80	; 128
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 6a       	ori	r24, 0xA0	; 160
  ea:	80 83       	st	Z, r24

	// UART SETTINGS
	// Set baud rate: UBRR = [F_CPU/(16*BAUD)] - 1
	unsigned int baudrate;
	baudrate = ((F_CPU/16)/BAUD) - 1;
	UBRR0H = (unsigned char) (baudrate >> 8);
  ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) baudrate;
  f0:	83 e3       	ldi	r24, 0x33	; 51
  f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);		// Enable receiver and transmitter
  f6:	a1 ec       	ldi	r26, 0xC1	; 193
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	88 61       	ori	r24, 0x18	; 24
  fe:	8c 93       	st	X, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	// Set data frame: 8 data bits, 1 stop bit, no parity
 100:	c2 ec       	ldi	r28, 0xC2	; 194
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	88 81       	ld	r24, Y
 106:	86 60       	ori	r24, 0x06	; 6
 108:	88 83       	st	Y, r24
	UCSR0B |= (1 << RXCIE0);					// Enable receiver interrupt
 10a:	8c 91       	ld	r24, X
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	8c 93       	st	X, r24
	sei();										// Enable global interrupts
 110:	78 94       	sei
	
	// Fast PWM, ICR1= TOP
	TCCR1A |= (1 << WGM11);
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 118:	e1 e8       	ldi	r30, 0x81	; 129
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 61       	ori	r24, 0x18	; 24
 120:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS11); // clock div 8
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
			LEDPORT ^= (1 << LED_PIN_LEFT);	// turn LED on
			_delay_ms(500);
		}
		while(m == 1)
		{
			LEDPORT ^= (1 << LED_PIN_RIGHT);	// turn LED on
 128:	20 e2       	ldi	r18, 0x20	; 32
	
	while (1)
	{
		while(n == 1)
		{
			LEDPORT ^= (1 << LED_PIN_LEFT);	// turn LED on
 12a:	30 e1       	ldi	r19, 0x10	; 16
 12c:	0c c0       	rjmp	.+24     	; 0x146 <main+0xa0>
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	83 27       	eor	r24, r19
 132:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	4f ef       	ldi	r20, 0xFF	; 255
 136:	84 e3       	ldi	r24, 0x34	; 52
 138:	9c e0       	ldi	r25, 0x0C	; 12
 13a:	41 50       	subi	r20, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x94>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x9e>
 144:	00 00       	nop
	
	TCCR1B |= (1 << CS11); // clock div 8
	
	while (1)
	{
		while(n == 1)
 146:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 14a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	71 f3       	breq	.-36     	; 0x12e <main+0x88>
		{
			LEDPORT ^= (1 << LED_PIN_LEFT);	// turn LED on
			_delay_ms(500);
		}
		while(m == 1)
 152:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <m>
 156:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <m+0x1>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	a1 f7       	brne	.-24     	; 0x146 <main+0xa0>
		{
			LEDPORT ^= (1 << LED_PIN_RIGHT);	// turn LED on
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	82 27       	eor	r24, r18
 162:	88 b9       	out	0x08, r24	; 8
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	84 e3       	ldi	r24, 0x34	; 52
 168:	9c e0       	ldi	r25, 0x0C	; 12
 16a:	41 50       	subi	r20, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0xc4>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xce>
 174:	00 00       	nop
		while(n == 1)
		{
			LEDPORT ^= (1 << LED_PIN_LEFT);	// turn LED on
			_delay_ms(500);
		}
		while(m == 1)
 176:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <m>
 17a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <m+0x1>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	71 f3       	breq	.-36     	; 0x15e <main+0xb8>
 182:	e1 cf       	rjmp	.-62     	; 0x146 <main+0xa0>

00000184 <Brake>:
	}
}

void Brake()
{
	PORTB |= (1 << motorPosA) | (1 << motorNegA);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	80 63       	ori	r24, 0x30	; 48
 188:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1 << motorPosB) | (1 << motorNegB);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	88 61       	ori	r24, 0x18	; 24
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <Forward>:
}
void Forward()
{
	PORTB |= (1 << motorPosA);
 192:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motorNegA);
 194:	2c 98       	cbi	0x05, 4	; 5
	PORTD |= (1 << motorPosB);
 196:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD &= ~(1 << motorNegB);
 198:	5c 98       	cbi	0x0b, 4	; 11
 19a:	08 95       	ret

0000019c <Reverse>:
}
void Reverse()
{
	PORTB |= (1 << motorNegA);
 19c:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1 << motorPosA);
 19e:	2d 98       	cbi	0x05, 5	; 5
	PORTD |= (1 << motorNegB);
 1a0:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~(1 << motorPosB);
 1a2:	5b 98       	cbi	0x0b, 3	; 11
 1a4:	08 95       	ret

000001a6 <TurnRight>:
}

void TurnRight()
{
	PORTB |= (1 << motorNegA);
 1a6:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1 << motorPosA);
 1a8:	2d 98       	cbi	0x05, 5	; 5
	PORTD |= (1 << motorPosB);
 1aa:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD &= ~(1 << motorNegB);
 1ac:	5c 98       	cbi	0x0b, 4	; 11
 1ae:	08 95       	ret

000001b0 <TurnLeft>:
}

void TurnLeft()
{
	PORTB |= (1 << motorPosA);
 1b0:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motorNegA);
 1b2:	2c 98       	cbi	0x05, 4	; 5
	PORTD |= (1 << motorNegB);
 1b4:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~(1 << motorPosB);
 1b6:	5b 98       	cbi	0x0b, 3	; 11
 1b8:	08 95       	ret

000001ba <LeftSignal>:
}

void LeftSignal()
{
	if(n == 0)
 1ba:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 1be:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1c2:	89 2b       	or	r24, r25
 1c4:	69 f4       	brne	.+26     	; 0x1e0 <LeftSignal+0x26>
	{
		n = 1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
 1ce:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
		m = 0;
 1d2:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <m+0x1>
 1d6:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <m>
		LEDPORT &= ~(1 << LED_PIN_LEFT);	// turn LED on
 1da:	44 98       	cbi	0x08, 4	; 8
		LEDPORT &= ~(1 << LED_PIN_RIGHT);	// turn LED on
 1dc:	45 98       	cbi	0x08, 5	; 8
 1de:	08 95       	ret
	}
	else
	{
		n = 0;
 1e0:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
 1e4:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
		LEDPORT &= ~(1 << LED_PIN_LEFT);	// turn LED on
 1e8:	44 98       	cbi	0x08, 4	; 8
		LEDPORT &= ~(1 << LED_PIN_RIGHT);	// turn LED on
 1ea:	45 98       	cbi	0x08, 5	; 8
 1ec:	08 95       	ret

000001ee <RightSignal>:
	}
}

void RightSignal()
{
	if(m == 0)
 1ee:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <m>
 1f2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <m+0x1>
 1f6:	89 2b       	or	r24, r25
 1f8:	69 f4       	brne	.+26     	; 0x214 <RightSignal+0x26>
	{
		m = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <m+0x1>
 202:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <m>
		n = 0;
 206:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
 20a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
		LEDPORT &= ~(1 << LED_PIN_LEFT);	// turn LED on
 20e:	44 98       	cbi	0x08, 4	; 8
		LEDPORT &= ~(1 << LED_PIN_RIGHT);	// turn LED on
 210:	45 98       	cbi	0x08, 5	; 8
 212:	08 95       	ret
	}
	else
	{
		m = 0;
 214:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <m+0x1>
 218:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <m>
		LEDPORT &= ~(1 << LED_PIN_LEFT);	// turn LED on
 21c:	44 98       	cbi	0x08, 4	; 8
		LEDPORT &= ~(1 << LED_PIN_RIGHT);	// turn LED on
 21e:	45 98       	cbi	0x08, 5	; 8
 220:	08 95       	ret

00000222 <__vector_18>:
		}
	}
}

ISR (USART_RX_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	unsigned char receivedChar;

	receivedChar = UDR0;				// Read data from the RX buffer
 248:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(receivedChar == 'w')
 24c:	87 37       	cpi	r24, 0x77	; 119
 24e:	81 f4       	brne	.+32     	; 0x270 <__vector_18+0x4e>
	{
		Forward();
 250:	0e 94 c9 00 	call	0x192	; 0x192 <Forward>
		str = "Forward\n\r";
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 25c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
	
	else
	str = "Not a command.\n\r";
	
	unsigned int i = 0;
	while(str[i] != 0)
 260:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <str>
 264:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <str+0x1>
 268:	90 81       	ld	r25, Z
 26a:	91 11       	cpse	r25, r1
 26c:	98 c0       	rjmp	.+304    	; 0x39e <__vector_18+0x17c>
 26e:	ac c0       	rjmp	.+344    	; 0x3c8 <__vector_18+0x1a6>
	if(receivedChar == 'w')
	{
		Forward();
		str = "Forward\n\r";
	}
	else if(receivedChar == 's')
 270:	83 37       	cpi	r24, 0x73	; 115
 272:	49 f4       	brne	.+18     	; 0x286 <__vector_18+0x64>
	{
		Reverse();
 274:	0e 94 ce 00 	call	0x19c	; 0x19c <Reverse>
		str = "Backward\n\r";
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 280:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 284:	ed cf       	rjmp	.-38     	; 0x260 <__vector_18+0x3e>
	}
	else if(receivedChar == 'a')
 286:	81 36       	cpi	r24, 0x61	; 97
 288:	49 f4       	brne	.+18     	; 0x29c <__vector_18+0x7a>
	{
		TurnLeft();
 28a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TurnLeft>
		str = "Left\n\r";
 28e:	85 e1       	ldi	r24, 0x15	; 21
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 296:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 29a:	e2 cf       	rjmp	.-60     	; 0x260 <__vector_18+0x3e>
	}
	else if(receivedChar == 'd')
 29c:	84 36       	cpi	r24, 0x64	; 100
 29e:	49 f4       	brne	.+18     	; 0x2b2 <__vector_18+0x90>
	{
		TurnRight();
 2a0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TurnRight>
		str = "Right\n\r";
 2a4:	8c e1       	ldi	r24, 0x1C	; 28
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 2ac:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 2b0:	d7 cf       	rjmp	.-82     	; 0x260 <__vector_18+0x3e>
	}
	else if(receivedChar == ' ')
 2b2:	80 32       	cpi	r24, 0x20	; 32
 2b4:	49 f4       	brne	.+18     	; 0x2c8 <__vector_18+0xa6>
	{
		Brake();
 2b6:	0e 94 c2 00 	call	0x184	; 0x184 <Brake>
		str = "Brake\n\r";
 2ba:	84 e2       	ldi	r24, 0x24	; 36
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 2c2:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 2c6:	cc cf       	rjmp	.-104    	; 0x260 <__vector_18+0x3e>
	}
	else if(receivedChar == 'q')
 2c8:	81 37       	cpi	r24, 0x71	; 113
 2ca:	49 f4       	brne	.+18     	; 0x2de <__vector_18+0xbc>
	{
		LeftSignal();
 2cc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LeftSignal>
		str = "LeftSig\n\r";
 2d0:	8c e2       	ldi	r24, 0x2C	; 44
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 2d8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 2dc:	c1 cf       	rjmp	.-126    	; 0x260 <__vector_18+0x3e>
	}
	else if(receivedChar == 'e')
 2de:	85 36       	cpi	r24, 0x65	; 101
 2e0:	49 f4       	brne	.+18     	; 0x2f4 <__vector_18+0xd2>
	{
		RightSignal();
 2e2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <RightSignal>
		str = "RightSig\n\r";
 2e6:	86 e3       	ldi	r24, 0x36	; 54
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 2ee:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 2f2:	b6 cf       	rjmp	.-148    	; 0x260 <__vector_18+0x3e>
	}
	
	else if(receivedChar == 'r')
 2f4:	82 37       	cpi	r24, 0x72	; 114
 2f6:	29 f5       	brne	.+74     	; 0x342 <__vector_18+0x120>
	{
		if(OCR1A < 2000)
 2f8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2fc:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 300:	80 3d       	cpi	r24, 0xD0	; 208
 302:	97 40       	sbci	r25, 0x07	; 7
 304:	b8 f4       	brcc	.+46     	; 0x334 <__vector_18+0x112>
		{
			OCR1A += 500; // 100% duty cycle
 306:	e8 e8       	ldi	r30, 0x88	; 136
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	8c 50       	subi	r24, 0x0C	; 12
 310:	9e 4f       	sbci	r25, 0xFE	; 254
 312:	91 83       	std	Z+1, r25	; 0x01
 314:	80 83       	st	Z, r24
			OCR1B += 500; // SAME
 316:	ea e8       	ldi	r30, 0x8A	; 138
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	91 81       	ldd	r25, Z+1	; 0x01
 31e:	8c 50       	subi	r24, 0x0C	; 12
 320:	9e 4f       	sbci	r25, 0xFE	; 254
 322:	91 83       	std	Z+1, r25	; 0x01
 324:	80 83       	st	Z, r24
			str = "Speeding up!!!\n\r";
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 32e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 332:	96 cf       	rjmp	.-212    	; 0x260 <__vector_18+0x3e>
		}
		else
		str = "Cannot go faster!!\n\r";
 334:	82 e5       	ldi	r24, 0x52	; 82
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 33c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 340:	8f cf       	rjmp	.-226    	; 0x260 <__vector_18+0x3e>
	}
	else if(receivedChar == 'f')
 342:	86 36       	cpi	r24, 0x66	; 102
 344:	29 f5       	brne	.+74     	; 0x390 <__vector_18+0x16e>
	{
		if(OCR1A > 1000)
 346:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 34a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 34e:	89 3e       	cpi	r24, 0xE9	; 233
 350:	93 40       	sbci	r25, 0x03	; 3
 352:	b8 f0       	brcs	.+46     	; 0x382 <__vector_18+0x160>
		{
			OCR1A -= 500; // 100% duty cycle
 354:	e8 e8       	ldi	r30, 0x88	; 136
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	84 5f       	subi	r24, 0xF4	; 244
 35e:	91 40       	sbci	r25, 0x01	; 1
 360:	91 83       	std	Z+1, r25	; 0x01
 362:	80 83       	st	Z, r24
			OCR1B -= 500; // SAME
 364:	ea e8       	ldi	r30, 0x8A	; 138
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	91 81       	ldd	r25, Z+1	; 0x01
 36c:	84 5f       	subi	r24, 0xF4	; 244
 36e:	91 40       	sbci	r25, 0x01	; 1
 370:	91 83       	std	Z+1, r25	; 0x01
 372:	80 83       	st	Z, r24
			str = "Slowing down...\n\r";
 374:	87 e6       	ldi	r24, 0x67	; 103
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 37c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 380:	6f cf       	rjmp	.-290    	; 0x260 <__vector_18+0x3e>
		}
		else
		str = "Cannot go slower...\n\r";
 382:	89 e7       	ldi	r24, 0x79	; 121
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 38a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 38e:	68 cf       	rjmp	.-304    	; 0x260 <__vector_18+0x3e>
	}
	
	else
	str = "Not a command.\n\r";
 390:	8f e8       	ldi	r24, 0x8F	; 143
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <str+0x1>
 398:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <str>
 39c:	61 cf       	rjmp	.-318    	; 0x260 <__vector_18+0x3e>
	
	unsigned int i = 0;
	while(str[i] != 0)
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
	{
		while (!(UCSR0A & (1<<UDRE0)));
 3a2:	e0 ec       	ldi	r30, 0xC0	; 192
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = str[i];	// Write the data to the TX buffer
 3a6:	c6 ec       	ldi	r28, 0xC6	; 198
 3a8:	d0 e0       	ldi	r29, 0x00	; 0
	str = "Not a command.\n\r";
	
	unsigned int i = 0;
	while(str[i] != 0)
	{
		while (!(UCSR0A & (1<<UDRE0)));
 3aa:	80 81       	ld	r24, Z
 3ac:	85 ff       	sbrs	r24, 5
 3ae:	fd cf       	rjmp	.-6      	; 0x3aa <__vector_18+0x188>
		UDR0 = str[i];	// Write the data to the TX buffer
 3b0:	98 83       	st	Y, r25
		i++;
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
	
	else
	str = "Not a command.\n\r";
	
	unsigned int i = 0;
	while(str[i] != 0)
 3b6:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <str>
 3ba:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <str+0x1>
 3be:	a2 0f       	add	r26, r18
 3c0:	b3 1f       	adc	r27, r19
 3c2:	9c 91       	ld	r25, X
 3c4:	91 11       	cpse	r25, r1
 3c6:	f1 cf       	rjmp	.-30     	; 0x3aa <__vector_18+0x188>
	{
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = str[i];	// Write the data to the TX buffer
		i++;
	}
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>
